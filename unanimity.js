// Generated by CoffeeScript 1.4.0
var unanimity;

unanimity = function(backbone, db) {
  backbone.sync = function(method, model, options) {
    var id, rev, update;
    id = null;
    if (model.id !== void 0) {
      id = model.id;
    }
    update = {};
    if (method === 'update' || method === 'create' || method === 'patch') {
      db.insert(model.toJSON(), id, function(err, body) {
        if (err) {
          if (typeof options.error === 'funciton') {
            options.error(model, err, options);
            return;
          } else {
            throw err;
          }
        }
        update['_rev'] = body.rev;
        if (id === null) {
          update[model.idAttribute] = body.id;
        }
        options.success(model, update, options);
        return model.trigger('sync', model);
      });
    } else if (method === 'read') {
      if (id === null) {
        throw "Can't fetch a model without id!";
      }
      db.get(id, function(err, body) {
        var key, value;
        if (err) {
          if (typeof options.error === 'funciton') {
            options.error(model, err, options);
            return;
          } else {
            throw err;
          }
        }
        for (key in body) {
          value = body[key];
          if (key !== '_id') {
            update[key] = value;
          }
        }
        return options.success(model, update, options);
      });
    } else if (method === 'delete') {
      rev = model.get('_rev');
      if (id === null) {
        throw "Can't destroy a model without id!";
      }
      if (typeof rev !== 'string') {
        throw "Can't destroy a new model!";
      }
      db.destroy(id, rev, function(err, body) {
        if (err) {
          if (typeof options.error === 'funciton') {
            options.error(model, err, options);
            return;
          } else {
            throw err;
          }
        }
        return options.success(model, update, options);
      });
    }
    return model;
  };
  return backbone.sync.db = db;
};

module.exports = unanimity;
